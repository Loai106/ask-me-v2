// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username String? @unique
  image    String?
  Questions Questions[]
  Likes     Likes[]
  Answer    Answer[]

  following User[]    @relation("Following", references: [id])
  followers User[]    @relation("Following", references: [id])

  accounts Account[]
  sessions Session[]
}

model Questions {
  id          String    @id @default(cuid())
  content     String
  author    User      @relation("QuestionsAsked", fields: [authorId], references: [id])
  authorId  String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  likes       Likes[]
  Answer      Answer[]
  createdAt   DateTime   @default(now())
  comments    Comments[]
}

model Answer {
  id            String    @id @default(cuid())
  content    String
  createdAt  DateTime  @default(now())
  question   Questions @relation(fields: [questionId], references: [id])
  questionId String
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model Likes {
  id            String    @id @default(cuid())
  question   Questions? @relation(fields: [questionId], references: [id])
  questionId Int
  user       User      @relation(fields: [userId], references: [id])
  userId     String
}


Comments {
  id       String @id @default(cuid())
  text     String
  createdAt DateTime @default(now())
  author User
  authorId String

  replyToId String?
  replyTo Comments? @relation("ReplyTo", fields:[replyToId],references:[id])
  replies Comments[] @relation("ReplyTo")


}