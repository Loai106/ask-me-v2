// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username String? @unique
  image    String?
  askedQuestions    Questions[]     @relation("AskedQuestions")
  Likes     Likes[]
  receivedQuestions Questions[]     @relation("ReceivedQuestions")
  followers Follows[] @relation("follower")
  following Follows[] @relation("following")

  comments Comment[]
  accounts Account[]
  sessions Session[]
}

model Questions {
  id          String    @id @default(cuid())
  content     String
  author       User?      @relation("AskedQuestions", fields: [authorId], references: [id])
  authorId     String?     @map("authorId")
  isAnonymous  Boolean   @default(true)
  user        User       @relation("ReceivedQuestions",fields: [userId], references: [id])
  userId      String
  likes       Likes[]
  answer String?
  comments    Comment[]
  createdAt   DateTime   @default(now())
}



model Likes {
  question   Questions? @relation(fields: [questionId], references: [id])
  questionId String
  user       User      @relation(fields: [userId], references: [id])
  userId     String

  @@id([questionId, userId])

}


model Comment {
  id       String @id @default(cuid())
  text     String
  createdAt DateTime @default(now())
  author User  @relation(fields:[authorId],references:[id])
  authorId String
  question  Questions @relation(fields:[questionId],references:[id])
  questionId String
  replyToId String?
  replyTo Comment? @relation("ReplyTo", fields:[replyToId],references:[id])
  replies Comment[] @relation("ReplyTo")
}

model Follows {
  follower   User @relation("follower", fields: [followerId], references: [id])
  followerId String

  folllowing  User @relation("following", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now()) 
  // composite key
  @@id([followerId, followingId])
  @@map("follows")
}